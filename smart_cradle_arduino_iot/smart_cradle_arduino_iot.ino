/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/5ad07b93-f909-4383-a36d-87e710248e39 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  bool fan_button;
  bool servo_button;
  bool wetness;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#include <ESP32Servo.h>

#define SERVO_PIN 26 // ESP32 pin GPIO26 connected to servo motor
#define DHTPIN 32     // Digital pin connected to the DHT sensor
#define water_sensor  19
#define fan  21
#define DHTTYPE DHT11   // DHT 11  

bool servo_state;
bool fan_state;
bool wet_state;
int swing_cnt;
unsigned long wet_ctime;
unsigned long wet_ptime;
unsigned long swing_ctime;
unsigned long swing_ptime;
bool wet;
int pos = 0;    // variable to store the servo position

DHT dht(DHTPIN, DHTTYPE);
Servo servo;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  servo.attach(SERVO_PIN);  // attaches the servo on ESP32 pin
  servo.write(0);
  dht.begin();
  pinMode(water_sensor, INPUT);
  pinMode(fan, OUTPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(fan,1);
  digitalWrite(LED_BUILTIN,0);
  
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here 

wet = digitalRead(water_sensor);
wet_ctime = millis();
swing_ctime=millis();
//  if(wetness!=wet){
//  wetness = wet; 
//}
 
 wetness = !wet; 
 
  if((swing_ctime - swing_ptime>1000) &servo_state)
  {
    swing_ptime = swing_ctime;
    if(swing_cnt%2==0){
      for (int pos = 0; pos <= 180; pos += 10) {
      // in steps of 1 degree
      servo.write(pos);
     // delay(15); // waits 15ms to reach the position
    }
    }
   else if(swing_cnt%2==1){
     for (int pos = 180; pos >=0; pos -= 10) {
      // in steps of 1 degree
      servo.write(pos);
     // delay(15); // waits 15ms to reach the position
    }
   } 
   swing_cnt++;
  }
  
 if(temperature != dht.readTemperature()){
  
Serial.printf("The PREV temp value %f",temperature);
  temperature = dht.readTemperature();
Serial.printf("The temp value %f",temperature);
}

  if(humidity != dht.readHumidity()){
  
Serial.printf("The PREV HUMIDITY value %f",humidity);
  humidity = dht.readHumidity();
Serial.printf("The HUMIDITY value %f",humidity);
}
//if(millis()-wet_ptime>2000){
//  temperature  = random(20,100);
//  humidity   = random(20,100);
//wet_ptime =millis();
//}

}



/*
  Since Wetness is READ_WRITE variable, onWetnessChange() is
  executed every time a new value is received from IoT Cloud.
*/

/*
  Since ServoButton is READ_WRITE variable, onServoButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoButtonChange()  {
  // Add your code here to act upon ServoButton change
if(servo_button == true)
{
 servo_state  = 1;
  // if(servo_state)
  // {
  //   servo.write(180);
  // }
}
else if(servo_button==false)
{
  servo_state = 0;
 // servo.write(-180);
   }
  
}
/*
  Since FanButton is READ_WRITE variable, onFanButtonChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanButtonChange()  {
  // Add your code here to act upon FanButton change
if(fan_button==1){
  digitalWrite(fan,0);
  digitalWrite(LED_BUILTIN,1);
}
else if(fan_button==0){
  digitalWrite(fan,1);
  digitalWrite(LED_BUILTIN,0);
  }
}
